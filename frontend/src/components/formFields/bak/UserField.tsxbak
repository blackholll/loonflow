import React from 'react';
import {
    Autocomplete,
    TextField as MuiTextField,
    FormControl,
    FormHelperText,
    InputLabel,
    Chip
} from '@mui/material';
import { BaseFieldProps, FieldRenderMode } from './types';

interface UserFieldProps extends BaseFieldProps {
    mode?: FieldRenderMode;
    multiple?: boolean;
    users?: Array<{ username: string; alias: string; email?: string }>;
}

const UserField: React.FC<UserFieldProps> = ({
    field,
    value = '',
    onChange,
    disabled = false,
    readOnly = false,
    required = false,
    error = false,
    helperText = '',
    size = 'small',
    variant = 'outlined',
    fullWidth = true,
    mode = 'view',
    multiple = false,
    users = []
}) => {
    const isDesignMode = mode === 'design';
    const isViewMode = mode === 'view';
    const isEditMode = mode === 'edit';

    // 从field的props中获取用户列表，如果没有则使用传入的users
    const fieldUsers = users;
    const userOptions = fieldUsers.length > 0 ? fieldUsers : [
        { username: 'zhangsan', alias: '张三', email: 'zhangsan@example.com' },
        { username: 'lisi', alias: '李四', email: 'lisi@example.com' },
        { username: 'wangwu', alias: '王五', email: 'wangwu@example.com' }
    ];

    const handleChange = (event: any, newValue: any) => {
        if (onChange && !isViewMode) {
            onChange(newValue);
        }
    };

    // 查看模式：只显示值
    if (isViewMode) {
        let displayValue = '-';
        if (value) {
            if (multiple && Array.isArray(value)) {
                displayValue = value.map(v => {
                    const user = userOptions.find(u => u.username === v);
                    return user ? user.alias : v;
                }).join(', ');
            } else {
                const user = userOptions.find(u => u.username === value);
                displayValue = user ? user.alias : value;
            }
        }

        return (
            <FormControl fullWidth={fullWidth} error={error}>
                {field.label && (
                    <InputLabel shrink>{field.label}</InputLabel>
                )}
                <div style={{
                    padding: '16.5px 14px',
                    border: '1px solid #c0c0c0',
                    borderRadius: '4px',
                    backgroundColor: '#f5f5f5',
                    minHeight: '56px'
                }}>
                    {displayValue}
                </div>
                {helperText && <FormHelperText>{helperText}</FormHelperText>}
            </FormControl>
        );
    }

    // 设计模式和编辑模式：可编辑
    return (
        <FormControl fullWidth={fullWidth} error={error}>
            <Autocomplete
                options={userOptions}
                getOptionLabel={(option) => option.alias || option.username}
                value={value}
                onChange={handleChange}
                multiple={multiple}
                disabled={disabled}
                freeSolo={false}
                disableClearable={false}
                renderInput={(params) => (
                    <MuiTextField
                        {...params}
                        placeholder={field.placeholder}
                        variant={variant}
                        required={required}
                        error={error}
                        helperText={helperText}
                    />
                )}
                renderTags={(value, getTagProps) =>
                    value.map((option, index) => {
                        const user = userOptions.find(u => u.username === option.username);
                        return (
                            <Chip
                                variant="outlined"
                                label={user ? user.alias : option.alias}
                                size="small"
                                {...getTagProps({ index })}
                            />
                        );
                    })
                }
                renderOption={(props, option) => (
                    <li {...props}>
                        <div>
                            <div>{option.alias}</div>
                            <div style={{ fontSize: '0.8em', color: '#666' }}>
                                {option.username} {option.email && `(${option.email})`}
                            </div>
                        </div>
                    </li>
                )}
                filterOptions={(options, { inputValue }) => {
                    const filtered = options.filter((option) =>
                        option.alias.toLowerCase().includes(inputValue.toLowerCase()) ||
                        option.username.toLowerCase().includes(inputValue.toLowerCase())
                    );
                    return filtered;
                }}
                noOptionsText="未找到匹配的用户"
                clearOnBlur={false}
                selectOnFocus
                clearOnEscape
                isOptionEqualToValue={(option, value) => option.username === value.username}
            />
        </FormControl>
    );
};

export default UserField; 