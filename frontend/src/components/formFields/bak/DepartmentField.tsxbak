import React from 'react';
import {
    Autocomplete,
    TextField as MuiTextField,
    FormControl,
    FormHelperText,
    InputLabel,
    Chip
} from '@mui/material';
import { BaseFieldProps, FieldRenderMode } from './types';

interface DepartmentFieldProps extends BaseFieldProps {
    mode?: FieldRenderMode;
    multiple?: boolean;
    departments?: Array<{ id: string; name: string; parent_id?: string }>;
}

const DepartmentField: React.FC<DepartmentFieldProps> = ({
    field,
    value = '',
    onChange,
    disabled = false,
    readOnly = false,
    required = false,
    error = false,
    helperText = '',
    size = 'small',
    variant = 'outlined',
    fullWidth = true,
    mode = 'view',
    multiple = false,
    departments = []
}) => {
    const isDesignMode = mode === 'design';
    const isViewMode = mode === 'view';
    const isEditMode = mode === 'edit';

    // 从field的props中获取部门列表，如果没有则使用传入的departments
    const deptOptions = [
        { id: '1', name: '行政部', parent_id: null },
        { id: '2', name: '财务部', parent_id: null },
        { id: '3', name: '技术部', parent_id: null },
        { id: '4', name: '人事部', parent_id: null },
        { id: '5', name: '市场部', parent_id: null }
    ];

    const handleChange = (event: any, newValue: any) => {
        if (onChange && !isViewMode) {
            onChange(newValue);
        }
    };

    // 查看模式：只显示值
    if (isViewMode) {
        let displayValue = '-';
        if (value) {
            if (multiple && Array.isArray(value)) {
                displayValue = value.map(v => {
                    const dept = deptOptions.find(d => d.id === v);
                    return dept ? dept.name : v;
                }).join(', ');
            } else {
                const dept = deptOptions.find(d => d.id === value);
                displayValue = dept ? dept.name : value;
            }
        }

        return (
            <FormControl fullWidth={fullWidth} error={error}>
                {field.label && (
                    <InputLabel shrink>{field.label}</InputLabel>
                )}
                <div style={{
                    padding: '16.5px 14px',
                    border: '1px solid #c0c0c0',
                    borderRadius: '4px',
                    backgroundColor: '#f5f5f5',
                    minHeight: '56px'
                }}>
                    {displayValue}
                </div>
                {helperText && <FormHelperText>{helperText}</FormHelperText>}
            </FormControl>
        );
    }

    // 设计模式和编辑模式：可编辑
    return (
        <FormControl fullWidth={fullWidth} error={error}>
            <Autocomplete
                options={deptOptions}
                getOptionLabel={(option) => option.name}
                value={value}
                onChange={handleChange}
                multiple={multiple}
                disabled={disabled}
                freeSolo={false}
                disableClearable={false}
                renderInput={(params) => (
                    <MuiTextField
                        {...params}
                        placeholder={field.placeholder}
                        variant={variant}
                        required={required}
                        error={error}
                        helperText={helperText}
                    />
                )}
                renderTags={(value, getTagProps) =>
                    value.map((option, index) => {
                        const dept = deptOptions.find(d => d.id === option.id);
                        return (
                            <Chip
                                variant="outlined"
                                label={dept ? dept.name : option.name}
                                size="small"
                                {...getTagProps({ index })}
                            />
                        );
                    })
                }
                renderOption={(props, option) => (
                    <li {...props}>
                        <div>
                            <div>{option.name}</div>
                            {option.parent_id && (
                                <div style={{ fontSize: '0.8em', color: '#666' }}>
                                    上级部门: {deptOptions.find(d => d.id === option.parent_id)?.name}
                                </div>
                            )}
                        </div>
                    </li>
                )}
                filterOptions={(options, { inputValue }) => {
                    const filtered = options.filter((option) =>
                        option.name.toLowerCase().includes(inputValue.toLowerCase())
                    );
                    return filtered;
                }}
                noOptionsText="未找到匹配的部门"
                clearOnBlur={false}
                selectOnFocus
                clearOnEscape
                isOptionEqualToValue={(option, value) => option.id === value.id}
            />
        </FormControl>
    );
};

export default DepartmentField; 